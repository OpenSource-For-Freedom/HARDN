#!/bin/bash

# HARDN-XDR - Linux Security Hardening Extended Detection and Response
# Version 2.0.0
# Copyright (c) 2024 Christopher Bingham and Tim Burns
# Licensed under MIT License

set -euo pipefail

# Constants (can be overridden by environment variables for testing)
readonly HARDN_VERSION="${HARDN_VERSION:-2.0.0}"
readonly HARDN_CONFIG_DIR="${HARDN_CONFIG_DIR:-/etc/hardn}"
readonly HARDN_DATA_DIR="${HARDN_DATA_DIR:-/usr/share/hardn}"
readonly HARDN_LOG_DIR="${HARDN_LOG_DIR:-/var/log/hardn}"
readonly HARDN_LIB_DIR="${HARDN_LIB_DIR:-/var/lib/hardn}"
readonly HARDN_MODULES_DIR="${HARDN_MODULES_DIR:-${HARDN_DATA_DIR}/modules}"

# Import logging functions
# shellcheck source=/usr/share/hardn/modules/logging.sh
source "${HARDN_MODULES_DIR}/logging.sh"

# Import common utilities
# shellcheck source=/usr/share/hardn/modules/utils.sh
source "${HARDN_MODULES_DIR}/utils.sh"

# Initialize logging
init_logging

show_version() {
    cat << EOF
HARDN-XDR v${HARDN_VERSION}
Linux Security Hardening Extended Detection and Response

Target Systems: Debian 12+, Ubuntu 24.04+
Features: STIG Compliance, Malware Detection, System Hardening
Security Tools: UFW, Fail2Ban, AppArmor, AIDE, rkhunter, and more

Developed by: Christopher Bingham and Tim Burns
Copyright (c) 2024 - Licensed under MIT License
EOF
}

show_help() {
    cat << EOF
HARDN-XDR v${HARDN_VERSION} - Linux Security Hardening Sentinel

USAGE:
    hardn [COMMAND] [OPTIONS]

COMMANDS:
    setup               Perform complete system hardening
    audit               Run security audit and generate report
    status              Show system hardening status
    backup              Create backup of current configuration
    restore             Restore from backup
    monitor             Start/stop monitoring services
    update              Update security configurations
    dashboard           Launch GTK dashboard interface
    api                 Start REST API server
    uninstall           Remove HARDN-XDR hardening (requires confirmation)

OPTIONS:
    --version, -v       Show version information
    --help, -h          Show this help message
    --non-interactive   Run in non-interactive mode (for automation)
    --force             Force operation without confirmation prompts
    --config FILE       Use custom configuration file
    --log-level LEVEL   Set logging level (debug, info, warn, error)
    --dry-run           Show what would be done without making changes

EXAMPLES:
    hardn setup                    # Interactive system hardening
    hardn setup --non-interactive  # Automated system hardening
    hardn audit                    # Run security audit
    hardn status                   # Check hardening status
    hardn backup                   # Create configuration backup
    hardn monitor start            # Start monitoring services
    hardn dashboard                # Launch GUI dashboard
    hardn api --port 8080          # Start REST API server

For detailed documentation, visit:
https://github.com/OpenSource-For-Freedom/HARDN

WARNING: This tool makes significant system changes. Run only on systems
         intended for security hardening. Always create backups first.
EOF
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This command requires root privileges. Please run with sudo."
        exit 1
    fi
}

check_system() {
    if [[ ! -f /etc/debian_version ]]; then
        log_error "This system is not Debian-based. HARDN-XDR requires Debian 12+ or Ubuntu 24.04+."
        exit 1
    fi
    
    local debian_version
    if [[ -f /etc/os-release ]]; then
        # shellcheck source=/etc/os-release
        source /etc/os-release
        if [[ "${ID:-}" == "debian" ]]; then
            debian_version="${VERSION_ID:-}"
            if (( $(echo "${debian_version}" | cut -d. -f1) < 12 )); then
                log_error "Debian version ${debian_version} is not supported. Requires Debian 12+."
                exit 1
            fi
        elif [[ "${ID:-}" == "ubuntu" ]]; then
            debian_version="${VERSION_ID:-}"
            # Extract major and minor version numbers for comparison
            ubuntu_major=$(echo "${debian_version}" | cut -d. -f1)
            ubuntu_minor=$(echo "${debian_version}" | cut -d. -f2)
            if (( ubuntu_major < 24 || (ubuntu_major == 24 && ubuntu_minor < 4) )); then
                log_error "Ubuntu version ${debian_version} is not supported. Requires Ubuntu 24.04+."
                exit 1
            fi
        fi
    fi
    
    log_info "System check passed: ${PRETTY_NAME:-Unknown system}"
}

load_config() {
    local config_file="${1:-${HARDN_CONFIG_DIR}/hardn.conf}"
    
    if [[ -f "${config_file}" ]]; then
        # Load configuration, but avoid overriding readonly variables
        while IFS='=' read -r key value; do
            # Skip comments and empty lines
            [[ "${key}" =~ ^[[:space:]]*# ]] && continue
            [[ -z "${key}" ]] && continue
            
            # Remove quotes and whitespace
            key=$(echo "${key}" | xargs)
            value=$(echo "${value}" | xargs | sed 's/^["'\'']//' | sed 's/["'\'']$//')
            
            # Skip readonly variables
            if [[ "${key}" == "HARDN_VERSION" ]]; then
                continue
            fi
            
            # Set the variable if it's not readonly
            if ! readonly -p | grep -q "^declare -r ${key}="; then
                export "${key}=${value}"
            fi
        done < "${config_file}"
        
        log_debug "Loaded configuration from ${config_file}"
    else
        log_warn "Configuration file not found: ${config_file}"
        log_info "Using default settings"
    fi
}

cmd_setup() {
    log_info "Starting HARDN-XDR system hardening..."
    
    check_root
    check_system
    
    # Load hardening modules
    # shellcheck source=/usr/share/hardn/modules/hardening.sh
    source "${HARDN_MODULES_DIR}/hardening.sh"
    
    if [[ "${NON_INTERACTIVE:-false}" == "true" ]]; then
        log_info "Running in non-interactive mode"
        run_hardening_non_interactive
    else
        run_hardening_interactive
    fi
    
    log_info "HARDN-XDR setup completed successfully!"
}

cmd_audit() {
    log_info "Running security audit..."
    
    check_root
    
    # shellcheck source=/usr/share/hardn/modules/audit.sh
    source "${HARDN_MODULES_DIR}/audit.sh"
    
    run_security_audit "$@"
}

cmd_status() {
    # shellcheck source=/usr/share/hardn/modules/status.sh
    source "${HARDN_MODULES_DIR}/status.sh"
    
    show_hardening_status
}

cmd_backup() {
    log_info "Creating system backup..."
    
    check_root
    
    # shellcheck source=/usr/share/hardn/modules/backup.sh
    source "${HARDN_MODULES_DIR}/backup.sh"
    
    create_system_backup "$@"
}

cmd_restore() {
    log_info "Restoring from backup..."
    
    check_root
    
    # shellcheck source=/usr/share/hardn/modules/backup.sh
    source "${HARDN_MODULES_DIR}/backup.sh"
    
    restore_system_backup "$@"
}

cmd_monitor() {
    local action="${1:-status}"
    
    check_root
    
    # shellcheck source=/usr/share/hardn/modules/monitor.sh
    source "${HARDN_MODULES_DIR}/monitor.sh"
    
    case "${action}" in
        start)
            start_monitoring_services
            ;;
        stop)
            stop_monitoring_services
            ;;
        restart)
            restart_monitoring_services
            ;;
        status)
            show_monitoring_status
            ;;
        *)
            log_error "Unknown monitor action: ${action}"
            log_info "Available actions: start, stop, restart, status"
            exit 1
            ;;
    esac
}

cmd_update() {
    log_info "Updating security configurations..."
    
    check_root
    
    # shellcheck source=/usr/share/hardn/modules/update.sh
    source "${HARDN_MODULES_DIR}/update.sh"
    
    update_security_configs "$@"
}

cmd_dashboard() {
    log_info "Launching HARDN-XDR Dashboard..."
    
    local dashboard_launcher="${HARDN_DATA_DIR}/../bin/hardn-dashboard"
    
    # Check if dashboard launcher exists
    if [[ ! -f "${dashboard_launcher}" ]]; then
        log_error "Dashboard launcher not found at ${dashboard_launcher}"
        log_info "Please ensure HARDN-XDR GUI components are properly installed."
        exit 1
    fi
    
    # Execute the dashboard launcher
    exec "${dashboard_launcher}" "$@"
}

cmd_api() {
    log_info "Starting HARDN-XDR API Server..."
    
    local api_launcher="${HARDN_DATA_DIR}/../bin/hardn-api"
    
    # Check if API launcher exists
    if [[ ! -f "${api_launcher}" ]]; then
        log_error "API launcher not found at ${api_launcher}"
        log_info "Please ensure HARDN-XDR API components are properly installed."
        exit 1
    fi
    
    # Execute the API launcher
    exec "${api_launcher}" "$@"
}

cmd_uninstall() {
    log_warn "Uninstalling HARDN-XDR hardening..."
    
    check_root
    
    if [[ "${FORCE:-false}" != "true" ]]; then
        read -p "Are you sure you want to remove HARDN-XDR hardening? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Uninstall cancelled"
            exit 0
        fi
    fi
    
    # shellcheck source=/usr/share/hardn/modules/uninstall.sh
    source "${HARDN_MODULES_DIR}/uninstall.sh"
    
    remove_hardening
}

# Global variables for options
NON_INTERACTIVE=false
FORCE=false
CONFIG_FILE=""
LOG_LEVEL="info"
DRY_RUN=false

# Parse command line arguments
main() {
    local command=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --version|-v)
                show_version
                exit 0
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --non-interactive)
                NON_INTERACTIVE=true
                export NON_INTERACTIVE
                shift
                ;;
            --force)
                FORCE=true
                export FORCE
                shift
                ;;
            --config)
                CONFIG_FILE="$2"
                shift 2
                ;;
            --log-level)
                LOG_LEVEL="$2"
                export LOG_LEVEL
                shift 2
                ;;
            --dry-run)
                DRY_RUN=true
                export DRY_RUN
                shift
                ;;
            setup|audit|status|backup|restore|monitor|update|dashboard|api|uninstall)
                command="$1"
                shift
                break
                ;;
            *)
                log_error "Unknown option: $1"
                log_info "Use 'hardn --help' for usage information."
                exit 1
                ;;
        esac
    done
    
    # Load configuration
    load_config "${CONFIG_FILE}"
    
    # If no command specified, show help
    if [[ -z "${command}" ]]; then
        show_help
        exit 0
    fi
    
    # Execute command
    case "${command}" in
        setup)
            cmd_setup "$@"
            ;;
        audit)
            cmd_audit "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        backup)
            cmd_backup "$@"
            ;;
        restore)
            cmd_restore "$@"
            ;;
        monitor)
            cmd_monitor "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        dashboard)
            cmd_dashboard "$@"
            ;;
        api)
            cmd_api "$@"
            ;;
        uninstall)
            cmd_uninstall "$@"
            ;;
        *)
            log_error "Unknown command: ${command}"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"