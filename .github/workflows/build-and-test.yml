name: Build and Test HARDN-XDR

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality and Linting
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure network access
      run: |
        # Ensure DNS resolution works properly
        echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
        echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
        
        # Test connectivity to GitHub
        MAX_RETRIES=3
        COUNT=0
        while [ $COUNT -lt $MAX_RETRIES ]; do
          ping -c 1 github.com && break
          COUNT=$((COUNT+1))
          echo "Retrying network connectivity test ($COUNT/$MAX_RETRIES)..."
          sleep 5
        done
    
    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
    
    - name: Lint shell scripts
      run: |
        find . -name "*.sh" -type f -exec shellcheck -S warning {} \;
        shellcheck -S warning usr/bin/hardn
    
    - name: Check file permissions
      run: |
        # Check that scripts are executable
        test -x usr/bin/hardn
        test -x debian/rules
        test -x debian/postinst
        test -x debian/postrm
        
    - name: Validate debian packaging
      run: |
        sudo apt-get install -y lintian
        # Basic package structure validation
        test -f debian/control
        test -f debian/changelog  
        test -f debian/copyright
        test -f debian/rules

  build:
    runs-on: ubuntu-latest
    name: Build Debian Package
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        # Retry apt-get operations in case of network issues
        MAX_RETRIES=3
        COUNT=0
        while [ $COUNT -lt $MAX_RETRIES ]; do
          sudo apt-get update && sudo apt-get install -y debhelper-compat devscripts build-essential && break
          COUNT=$((COUNT+1))
          echo "Retrying apt-get install ($COUNT/$MAX_RETRIES)..."
          sleep 5
        done
        
        if [ $COUNT -eq $MAX_RETRIES ]; then
          echo "Failed to install build dependencies after $MAX_RETRIES attempts."
          exit 1
        fi
    
    - name: Set up package structure
      run: |
        # Ensure proper directory structure
        mkdir -p debian/hardn-xdr/usr/bin
        mkdir -p debian/hardn-xdr/usr/share/hardn/modules
        mkdir -p debian/hardn-xdr/etc/hardn
        mkdir -p debian/hardn-xdr/var/log/hardn
        mkdir -p debian/hardn-xdr/lib/systemd/system
    
    - name: Update changelog with timestamp
      run: |
        # Fix the changelog timestamp
        sed -i "s/\$(date -R)/$(date -R)/" debian/changelog
    
    - name: Build package
      run: |
        dpkg-buildpackage -us -uc -b
    
    - name: Move package to current directory
      run: |
        mv ../hardn-xdr_*.deb ./
    
    - name: Check package with lintian
      run: |
        sudo apt-get install -y lintian
        lintian hardn-xdr_*.deb || true  # Don't fail on lintian warnings for now
    
    - name: Verify package contents
      run: |
        echo "Verifying package contents..."
        dpkg-deb --contents hardn-xdr_*.deb
        
        echo "Checking if hardn binary is included..."
        dpkg-deb --contents hardn-xdr_*.deb | grep "usr/bin/hardn" || {
          echo "ERROR: hardn binary not found in package!"
          exit 1
        }
        
        echo "Package verification completed successfully"
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: hardn-xdr-deb
        path: hardn-xdr_*.deb

  test:
    runs-on: ubuntu-latest
    name: Test Installation and Functionality
    needs: build
    
    strategy:
      matrix:
        debian-version: ['debian:12', 'ubuntu:24.04']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: hardn-xdr-deb
        path: ./
    
    - name: Test in container
      run: |
        docker run --rm -v "$PWD":/workspace -w /workspace ${{ matrix.debian-version }} bash -c "
          set -e
          apt-get update

          # Create system groups if they don't exist (handle errors gracefully)
          if ! getent group systemd-network >/dev/null 2>&1; then
            groupadd -r systemd-network || echo \"Group systemd-network already exists\"
          fi
          if ! getent group systemd-journal >/dev/null 2>&1; then
            groupadd -r systemd-journal || echo \"Group systemd-journal already exists\"
          fi
          
          # Handle resolv.conf conflicts (handle errors gracefully)
          if [[ -f /etc/resolv.conf && ! -L /etc/resolv.conf ]]; then
            mv /etc/resolv.conf /tmp/resolv.conf-backup || echo \"Failed to back up /etc/resolv.conf\"
          fi
          if [[ -f /run/systemd/resolve/stub-resolv.conf ]]; then
            ln -sf ../run/systemd/resolve/stub-resolv.conf /etc/resolv.conf || echo \"Symlink creation failed\"
          fi
          
          # Install essential dependencies first to avoid package installation failures
          # Use a more robust approach with individual package installation
          REQUIRED_PACKAGES=\"apparmor-utils apparmor-profiles\"
          for pkg in \$REQUIRED_PACKAGES; do
            if ! dpkg -l | grep -q \"\$pkg\"; then
              echo \"Installing missing dependency: \$pkg\"
              apt-get install -y \"\$pkg\" || echo \"Failed to install \$pkg, continuing...\"
            fi
          done
          
          # Install other dependencies with error handling
          apt-get install -y \\
            software-properties-common \\
            firejail \\
            auditd \\
            fail2ban \\
            rkhunter \\
            chkrootkit \\
            lynis \\
            rsyslog \\
            logrotate \\
            ca-certificates \\
            lsb-release \\
            gnupg \\
            openssh-server \\
            openssh-client \\
            ufw \\
            systemd-timesyncd \\
            apparmor \\
            apparmor-profiles \\
            apparmor-utils \\
            libpam-pwquality \\
            libpam-google-authenticator \\
            libpam-tmpdir \\
            curl \\
            wget \\
            lsof \\
            psmisc \\
            procps \\
            git \\
            whiptail \\
            adduser || {
              echo 'Some dependencies failed to install, trying package installation anyway...'
            }
          
          # Install the HARDN-XDR package
          dpkg -i ./hardn-xdr_*.deb || {
            echo 'Package installation failed, attempting to fix dependencies...'
            apt-get install -f -y
          }
          
          # Verify hardn command exists with robust checking (matching install.sh logic)
          if ! command -v hardn >/dev/null 2>&1; then
            echo 'ERROR: hardn command not found after installation'
            echo 'Checking package contents...'
            dpkg -L hardn-xdr | grep bin/ || true
            echo 'Checking PATH...'
            echo \$PATH
            
            # Add the installation directory to PATH and try again
            export PATH=\"\$PATH:/usr/bin\"
            echo \"Updated PATH: \$PATH\"
            
            # Try again after PATH update
            if ! command -v hardn >/dev/null 2>&1; then
              echo \"ERROR: hardn command still not found. Installation may have failed.\"
              exit 1
            fi
          fi

          
          # Verify hardn command is available  
          if ! command -v hardn &> /dev/null; then
            echo 'hardn command not found after installation'
            exit 1
          fi
          
          # Test basic functionality
          echo 'Testing hardn --version...'
          hardn --version
          
          echo 'Testing hardn --help...'
          hardn --help
          
          # Test status command (doesn't require root)
          echo 'Testing hardn status...'
          hardn status || echo 'hardn status failed (expected if services not configured)'
          
          # Test dry-run mode
          echo 'Testing hardn setup --dry-run...'
          hardn setup --dry-run --non-interactive || echo 'hardn setup dry-run failed (may be expected)'
          
          echo 'Package installation and basic tests completed successfully'
        "

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    needs: build
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Validate SARIF file exists
      run: |
        if [ ! -f trivy-results.sarif ]; then
          echo "SARIF file not found!"
          exit 1
        fi
        echo "SARIF file found and validated"
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Retry SARIF Upload on failure
      if: failure()
      run: |
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempting SARIF upload retry $((RETRY_COUNT + 1))/$MAX_RETRIES..."
          
          if gh api \
            --method POST \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/code-scanning/sarifs \
            --input trivy-results.sarif; then
            echo "SARIF upload successful on retry $((RETRY_COUNT + 1))"
            exit 0
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Retry $RETRY_COUNT failed, waiting before next attempt..."
          sleep 10
        done
        
        echo "All retry attempts failed"
        exit 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Testing
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: hardn-xdr-deb
        path: ./
    
    - name: Install missing dependencies
      run: |
        # Install essential dependencies first (matching install.sh approach)
        REQUIRED_PACKAGES=(apparmor-utils apparmor-profiles)
        for pkg in "${REQUIRED_PACKAGES[@]}"; do
          if ! dpkg -l | grep -q "$pkg"; then
            echo "Installing missing dependency: $pkg"
            sudo apt-get install -y "$pkg" || echo "Failed to install $pkg, continuing..."
          fi
        done
        
        # Retry apt-get operations in case of network issues
        MAX_RETRIES=3
        COUNT=0
        while [ $COUNT -lt $MAX_RETRIES ]; do
          sudo apt-get update && sudo apt-get install -y software-properties-common firejail libpam-google-authenticator libpam-tmpdir libpam-pwquality && break
          COUNT=$((COUNT+1))
          echo "Retrying dependency installation ($COUNT/$MAX_RETRIES)..."
          sleep 5
        done
        
        if [ $COUNT -eq $MAX_RETRIES ]; then
          echo "Failed to install dependencies after $MAX_RETRIES attempts."
          exit 1
        fi
        
    - name: Create missing groups with proper error handling
      run: |
        # Check and create groups if necessary (matching install.sh logic)
        if ! getent group systemd-network >/dev/null 2>&1; then
          sudo groupadd -r systemd-network || echo "Group systemd-network already exists"
        else
          echo "systemd-network group already exists"
        fi
        
        if ! getent group systemd-journal >/dev/null 2>&1; then
          sudo groupadd -r systemd-journal || echo "Group systemd-journal already exists"
        else
          echo "systemd-journal group already exists"
        fi
        
    - name: Handle resolv.conf conflict
      run: |
        sudo mv /etc/resolv.conf /tmp/resolv.conf-backup || echo "Failed to back up /etc/resolv.conf"
        sudo ln -sf ../run/systemd/resolve/stub-resolv.conf /etc/resolv.conf || echo "Symlink creation failed"
        
    - name: Suppress Python syntax warnings
      run: |
        export PYTHONWARNINGS="ignore"
        echo "PYTHONWARNINGS=ignore" | sudo tee -a /etc/environment
        
    - name: Run comprehensive tests
      run: |

        set -e
        
        # Install the package and handle dependencies properly
        echo "Installing HARDN-XDR package..."
        sudo apt-get update
        sudo dpkg -i hardn-xdr_*.deb || {
          echo "Package installation failed, fixing dependencies..."
          sudo apt-get install -f -y
        }
        
        # Verify hardn command exists with robust checking (matching install.sh logic)
        if ! command -v hardn >/dev/null 2>&1; then
          echo "ERROR: hardn command not found after installation"
          echo "Checking package contents..."
          dpkg -L hardn-xdr | grep bin/ || true
          echo "Checking PATH..."
          echo "$PATH"
          
          # Add the installation directory to PATH and try again
          export PATH="$PATH:/usr/bin" 
          echo "Updated PATH: $PATH"
          
          # Try again after PATH update
          if ! command -v hardn >/dev/null 2>&1; then
            echo "ERROR: hardn command still not found. Installation may have failed."
            exit 1
          fi
        fi

        # Test CLI functionality
        echo "Testing CLI commands..."
        hardn --version
        hardn --help
        
        # Test configuration
        echo "Testing configuration..."
        sudo test -f /etc/hardn/hardn.conf || echo "Configuration file not found (may be expected)"
        sudo test -d /var/log/hardn || echo "Log directory not found (may be expected)"
        
        # Test systemd service
        echo "Testing systemd service..."
        sudo systemctl status hardn-monitor || echo "Service not active (may be expected)"
        
        # Handle php8.3-fpm.service timeout if it exists
        if systemctl list-units --full -all | grep -q "php8.3-fpm.service"; then
          echo "Restarting php8.3-fpm.service with increased timeout..."
          sudo systemctl restart php8.3-fpm.service --timeout=300 || true
        fi
        
        # Test dry-run hardening
        echo "Testing dry-run hardening..."
        sudo hardn setup --dry-run --non-interactive || echo "Setup dry-run failed (may be expected depending on system state)"
        
        # Test audit functionality
        echo "Testing audit functionality..."
        sudo hardn audit lynis --dry-run || echo "Audit dry-run failed (may be expected depending on system state)"
        
        echo "Integration tests completed successfully"

  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [lint, build, test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download package artifact
      uses: actions/download-artifact@v4
      with:
        name: hardn-xdr-deb
        path: ./
    
    - name: Get version from changelog
      id: version
      run: |
        VERSION=$(head -1 debian/changelog | sed 's/.*(\(.*\)).*/\1/')
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
    
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        gh release create "v${VERSION}" \
          --title "HARDN-XDR v${VERSION}" \
          --notes "## HARDN-XDR v${VERSION}
          
          ### Changes
          - Refactored into modular architecture
          - Added proper Debian packaging
          - Implemented CLI interface
          - Added comprehensive logging and error handling
          - Enhanced security compliance
          
          ### Installation
          \`\`\`bash
          wget https://github.com/OpenSource-For-Freedom/HARDN/releases/download/v${VERSION}/hardn-xdr_${VERSION}_all.deb
          sudo dpkg -i hardn-xdr_${VERSION}_all.deb
          sudo apt-get install -f  # Fix any dependency issues
          \`\`\`
          
          ### Usage
          \`\`\`bash
          hardn setup              # Interactive system hardening
          hardn audit              # Run security audit
          hardn status             # Show system status
          hardn --help             # Show all commands
          \`\`\`" \
          ./hardn-xdr_${VERSION}_all.deb
